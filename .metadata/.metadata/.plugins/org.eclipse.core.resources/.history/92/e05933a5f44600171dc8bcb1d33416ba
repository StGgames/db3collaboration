package com.main.window;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.net.Socket;
import java.util.Random;

import javax.swing.JFrame;

import com.main.gameObject.handler.Handler;
import com.main.gameObject.player.hud.HUD;
import com.main.gameStates.GameStates;
import com.main.gameStates.stateChange.StateChanger;
import com.main.keyinput.KeyInput;

@SuppressWarnings("serial")
public class Game extends Canvas implements Runnable {

	//init variables
	
	private boolean running = false;
	private Thread thread;
	public static JFrame frame = new JFrame();
	public static Handler handler = new Handler();
	public HUD hud;
	public static GameStates gameState = GameStates.Menu;
	public static final int Width = 800;
	public static final int Height = 600;
	
	public static Random r = new Random();
	
	//initalizing init function
	
	public void init() {
		hud = new HUD();
		this.addKeyListener(new KeyInput(handler));
		this.addMouseListener(new StateChanger(handler));
	}
	
	//making the gameloop work

	@Override
	public void run() {
		this.requestFocus();
		init();
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int updates = 0;
		int frames = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1) {
				tick();
				updates++;
				delta--;
			}
			render();
			frames++;

			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println("FPS: " + frames + " TICKS: " + updates);
				frames = 0;
				updates = 0;
			}
		}
	}
	
	//the method for making the game start which is used in the window class

	public void start() {
		if (running) {
			return;
		} else {
			running = true;
			thread = new Thread(this);
			thread.start();
		}
	}
	
	//the tick medthod
	
	private void tick() {
		if (gameState == GameStates.Game)
			handler.tick();
	}
	
	//the render method

	private void render() {
		BufferStrategy bs = this.getBufferStrategy();

		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.black);
		g.fillRect(0, 0, Width, Height);
		
		//init game states
		
		if (gameState == GameStates.Menu) {
			g.setColor(Color.white);
			g.setFont(new Font("Helvetica", Font.BOLD, 30));

			g.drawString("Play", 800 / 2 - 30, 600 / 3 + 40);
			g.drawRect(800 / 2 - 200 / 2, 600 / 3, 200, 64);

			g.drawString("Help", 800 / 2 - 30, 600 / 2 + 40);
			g.drawRect(800 / 2 - 200 / 2, 600 / 2, 200, 64);

			g.drawString("Dodge Box 3", 800 / 2 - 30 * 3, 35);
		}

		if (gameState == GameStates.Game) {
			handler.render(g);
			hud.render(g);
		}
		
		if(gameState == GameStates.GameOver){
			g.setColor(Color.white);
			g.setFont(new Font("Helvetica", Font.BOLD, 30));
			g.drawString("GAME OVER", Game.Width/2-50, Game.Height/2 - 30);
			g.setFont(new Font("Helvetica", Font.BOLD, 20));
			g.drawString("SCORE: " + HUD.Points, Game.Width/2-50, Game.Height/2 + 30);
		}

		g.dispose();
		bs.show();
	}
	
	//main method for creating window
	
	public static void main(String[] args) throws Exception {
		new Window(Width, Height, "Dodge Box 3", new Game());
	}

}
